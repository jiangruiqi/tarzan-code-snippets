{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "头行表列表页": {
    "prefix": "t_head_row_table_list_page",
    "body": [
      "import React, { useMemo, useCallback, useEffect } from 'react';",
      "import { observer } from 'mobx-react';",
      "import { Table, DataSet, Dropdown, Menu } from 'choerodon-ui/pro';",
      "import { Badge, Collapse, Tag } from 'choerodon-ui';",
      "import { Record } from 'choerodon-ui/dataset';",
      "import { Button as PermissionButton } from 'components/Permission';",
      "import { Header, Content } from 'components/Page';",
      "import withProps from 'utils/withProps';",
      "import { ButtonColor } from 'choerodon-ui/pro/lib/button/enum';",
      "import intl from 'utils/intl';",
      "import formatterCollections from 'utils/intl/formatterCollections';",
      "import { ColumnProps } from 'choerodon-ui/pro/lib/table/Column';",
      "import { useDataSetEvent } from 'utils/hooks';",
      "import { ColumnAlign, TableQueryBarType } from 'choerodon-ui/pro/lib/table/enum';",
      "import { useRequest } from '@components/tarzan-hooks';",
      "import { PostMethod } from '../services';",
      "import { headDS, lineDS } from '../stores';",
      "",
      "const modelPrompt = 'modelPrompt_code';",
      "const { Panel } = Collapse;",
      "",
      "const XxxxList = observer((props) => {",
      "  const {",
      "    match: { path },",
      "    headDs,",
      "    lineDs,",
      "    history,",
      "    // location,",
      "  } = props;",
      "",
      "  const { run: postMethod, loading: postLoading } = useRequest(PostMethod(), { manual: true, needPromise: true }); // 手动查询，需要promise",
      "",
      "  useDataSetEvent(headDs.queryDataSet, 'update', ({ name, record }) => {",
      "    switch (name) {",
      "      case 'siteLov':",
      "        record?.init('materialLov', {});",
      "        break;",
      "      default:",
      "        break;",
      "    }",
      "  });",
      "",
      "  useDataSetEvent(headDs, 'load', ({ dataSet }) => {",
      "    if (!dataSet.length) {",
      "      // 查询出来没有数据",
      "      lineDs.loadData([]);",
      "      return;",
      "    }",
      "    makeLineTableQuery(dataSet.current);",
      "  })",
      "",
      "  useEffect(() => {",
      "    headDs.query(headDs.currentPage);",
      "  }, [])",
      "",
      "  // useEffect(() => {",
      "  //   if (location?.state?._back) {",
      "  //     // 详情页点取消跳转回来，query为空对象，会有state._back = -1",
      "  //     headDs.query(headDs.currentPage);",
      "  //   }",
      "  // }, [location?.state]);",
      "",
      "  const makeLineTableQuery = useCallback(",
      "    (record: Record) => {",
      "      lineDs.setQueryParameter('queryId', record.get('queryid'));",
      "      lineDs.query();",
      "    },",
      "    [],",
      "  )",
      "",
      "  const headerRowClick = useCallback(",
      "    (record) => {",
      "      makeLineTableQuery(record)",
      "    },",
      "    [],",
      "  )",
      "",
      "  const headColumns: ColumnProps[] = useMemo(() => {",
      "    return [",
      "      {",
      "        name: 'materialCode',",
      "        renderer: ({ value, record }) => {",
      "          return (",
      "            <a",
      "              onClick={() => {",
      "                history.push(`/detail_page_route/${record!.get('materialId')}`);",
      "              }}",
      "            >",
      "              {value}",
      "            </a>",
      "          );",
      "        },",
      "      },",
      "      {",
      "        name: 'inspectItemType',",
      "        // 若需要tag",
      "        // renderer: ({ record, value }) => {",
      "        //   switch (value) {",
      "        //     case 'NEW':",
      "        //       return (<Tag className=\"hcm-tag-green\">{record!.get('inspectItemTypeDesc')}</Tag>);",
      "        //     case 'USABLE':",
      "        //       return (<Tag className=\"hcm-tag-blue\">{record!.get('inspectItemTypeDesc')}</Tag>);",
      "        //     case 'CLOSED':",
      "        //       return (<Tag className=\"hcm-tag-purple\">{record!.get('inspectItemTypeDesc')}</Tag>);",
      "        //     default:",
      "        //       return '';",
      "        //   }",
      "        // },",
      "      },",
      "      { name: 'planStartTime' },",
      "      { name: 'planEndTime' },",
      "      {",
      "        name: 'enableFlag',",
      "        // width: 100,",
      "        align: ColumnAlign.center,",
      "        renderer: ({ value }) => (",
      "          <Badge",
      "            status={value === 'Y' ? 'success' : 'error'}",
      "            text={",
      "              value === 'Y'",
      "                ? intl.get(`tarzan.common.label.enable`).d('启用')",
      "                : intl.get(`tarzan.common.label.disable`).d('禁用')",
      "            }",
      "          />",
      "        ),",
      "      },",
      "    ];",
      "  }, []);",
      "",
      "  const lineColumns = [...headColumns];",
      "",
      "  const handleAdd = useCallback(() => {",
      "    history.push(`/page_route/create`);",
      "  }, []);",
      "",
      "  const isAllTypeEqualInput = (value) => headDs.selected.every((record) => record.get('inspectItemType') === value);",
      "",
      "  const clickMenu = useCallback(",
      "    (type: string) => {",
      "      postMethod({",
      "        params: {",
      "          ids: headDs.selected.map(record => record.get('id')),",
      "          type,",
      "        },",
      "      })",
      "    },",
      "    [],",
      "  )",
      "",
      "  const menu = (",
      "    <Menu style={{ width: '100px' }}>",
      "      <Menu.Item disabled={!isAllTypeEqualInput('NEW')} key=\"CANCEL\">",
      "        <a target=\"_blank\" rel=\"noopener noreferrer\" onClick={() => clickMenu('CANCEL')}>",
      "          {intl.get(`${modelPrompt}.button.cancel`).d('取消')}",
      "        </a>",
      "      </Menu.Item>",
      "      <Menu.Item disabled={!isAllTypeEqualInput('CANCEL')} key=\"CLOSED\">",
      "        <a target=\"_blank\" rel=\"noopener noreferrer\" onClick={() => clickMenu('CLOSED')}>",
      "          {intl.get(`${modelPrompt}.button.close`).d('关闭')}",
      "        </a>",
      "      </Menu.Item>",
      "    </Menu>",
      "  );",
      "",
      "  return (",
      "    <div className=\"hmes-style\">",
      "      <Header title={intl.get(`${modelPrompt}.title.list`).d('单表格的列表页')}>",
      "        <PermissionButton",
      "          type=\"c7n-pro\"",
      "          color={ButtonColor.primary}",
      "          icon=\"add\"",
      "          onClick={handleAdd}",
      "          permissionList={[",
      "            {",
      "              code: `${path}.button.edit`,",
      "              type: 'button',",
      "              meaning: '列表页-编辑新建删除复制按钮',",
      "            },",
      "          ]}",
      "        >",
      "          {intl.get('tarzan.common.button.create').d('新建')}",
      "        </PermissionButton>",
      "        <Dropdown",
      "          overlay={menu}",
      "          disabled={!headDs.selected.length}",
      "        >",
      "          <PermissionButton",
      "            type=\"c7n-pro\"",
      "            icon=\"cached\"",
      "            disabled={!headDs.selected.length}",
      "            loading={postLoading}",
      "            permissionList={[",
      "              {",
      "                code: `${path}.button.edit`,",
      "                type: 'button',",
      "                meaning: '列表页-编辑新建删除复制按钮',",
      "              },",
      "            ]}",
      "          >",
      "            {intl.get(`${modelPrompt}.button.changeStatus`).d('状态变更')}",
      "          </PermissionButton>",
      "        </Dropdown>",
      "      </Header>",
      "      <Content>",
      "        <Table",
      "          queryBar={TableQueryBarType.filterBar}",
      "          queryBarProps={{",
      "            fuzzyQuery: false,",
      "          }}",
      "          onRow={({ record }) => ({",
      "            onClick: () => headerRowClick(record),",
      "          })}",
      "          dataSet={headDs}",
      "          columns={headColumns}",
      "          searchCode=\"page_searchCode\"",
      "          customizedCode=\"page_customizedCode\"",
      "        />",
      "        <Collapse bordered={false} defaultActiveKey={['lineTable']}>",
      "          <Panel",
      "            key=\"lineTable\"",
      "            header={intl.get(`${modelPrompt}.title.lineTable`).d('行表格')}",
      "          >",
      "            <Table",
      "              dataSet={lineDs}",
      "              columns={lineColumns}",
      "              customizedCode=\"page_lineTable_customizedCode\"",
      "            />",
      "          </Panel>",
      "        </Collapse>",
      "      </Content>",
      "    </div>",
      "  );",
      "})",
      "",
      "export default formatterCollections({",
      "  code: [modelPrompt, 'tarzan.common'],",
      "})(",
      "  withProps(",
      "    () => {",
      "      const headDs = new DataSet(headDS());",
      "      const lineDs = new DataSet(lineDS());",
      "      return {",
      "        headDs,",
      "        lineDs,",
      "      };",
      "    },",
      "    // cacheState: 是否缓存数据",
      "    // cleanWhenClose: 关闭 tabs 时,是否自动清空缓存",
      "    // keepOriginDataSet: 是否保持原来的 DataSet 对象，不保留的话，会根据缓存的数据重查",
      "    { cacheState: true, cleanWhenClose: true, keepOriginDataSet: false },",
      "  )(XxxxList),",
      ");"
    ],
    "description": "头行表列表页"
  },
  "头行表列表页的DS": {
    "prefix": "t_head_row_table_list_page_ds",
    "body": [
      "import intl from 'utils/intl';",
      "import { DataSetSelection, FieldIgnore, FieldType } from 'choerodon-ui/pro/lib/data-set/enum';",
      "import { DataSetProps } from 'choerodon-ui/pro/lib/data-set/DataSet';",
      "import { getCurrentOrganizationId } from 'utils/utils';",
      "import moment from 'moment';",
      "import { BASIC } from '@utils/config';",
      "",
      "const modelPrompt = 'modelPrompt_code';",
      "const tenantId = getCurrentOrganizationId();",
      "",
      "const headDS: () => DataSetProps = () => ({",
      "  autoQuery: false,",
      "  autoCreate: false,",
      "  autoLocateFirst: true,",
      "  selection: DataSetSelection.multiple,",
      "  dataKey: 'rows.content', // 列表数据在接口返回json中的相对路径",
      "  totalKey: 'rows.totalElements',",
      "  primaryKey: 'materialId', // 表格唯一性主键",
      "  queryFields: [",
      "    {",
      "      name: 'siteLov',",
      "      type: FieldType.object,",
      "      label: intl.get(`${modelPrompt}.siteCode`).d('站点编码'),",
      "      lovCode: 'MT.MODEL.SITE',",
      "      lovPara: {",
      "        tenantId,",
      "      },",
      "      ignore: FieldIgnore.always,",
      "    },",
      "    {",
      "      name: 'siteId',",
      "      bind: 'siteLov.siteId',",
      "    },",
      "    {",
      "      name: 'materialLov',",
      "      type: FieldType.object,",
      "      label: intl.get(`${modelPrompt}.materialCode`).d('物料'),",
      "      lovCode: 'MT.METHOD.MATERIAL',",
      "      lovPara: { tenantId },",
      "      ignore: FieldIgnore.always,",
      "      computedProps: {",
      "        lovPara: ({ record }) => ({",
      "          tenantId,",
      "          siteId: record.get('siteId'),",
      "        }),",
      "        disabled: ({ record }) => {",
      "          return !record.get('siteId');",
      "        },",
      "      },",
      "    },",
      "    {",
      "      name: 'materialId',",
      "      bind: 'materialLov.materialId',",
      "    },",
      "    {",
      "      name: 'stringLable',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.siteCode`).d('string类型'),",
      "    },",
      "    {",
      "      name: 'inspectItemType',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.inspectItemType`).d('检验项目类型'),",
      "      textField: 'description',",
      "      valueField: 'typeCode',",
      "      lovPara: { tenantId },",
      "      lookupUrl: `${BASIC.TARZAN_COMMON}/v1/${tenantId}/mt-gen-type/combo-box/ui?typeGroup=INSPECT_ITEM_TYPE`,",
      "      lookupAxiosConfig: {",
      "        transformResponse(data) {",
      "          // data会有缓存，第一次查询得到结果为JSON字符串，再后来得到的是数组",
      "          if (data instanceof Array) {",
      "            return data;",
      "          }",
      "          const { rows } = JSON.parse(data);",
      "          return rows;",
      "        },",
      "      },",
      "    },",
      "    {",
      "      name: 'planStartTime',",
      "      type: FieldType.dateTime,",
      "      max: 'planEndTime',",
      "      label: intl.get(`${modelPrompt}.planStartTimeFrom`).d('计划开始时间从'),",
      "      defaultValue: moment(new Date()).format('YYYY-MM-DD 00:00:00'),",
      "      // defaultValue: moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),",
      "    },",
      "    {",
      "      name: 'planEndTime',",
      "      type: FieldType.dateTime,",
      "      min: 'planStartTime',",
      "      label: intl.get(`${modelPrompt}.planStartTimeTo`).d('计划开始时间至'),",
      "      defaultValue: moment(new Date()).format('YYYY-MM-DD 23:59:59'),",
      "    },",
      "    {",
      "      name: 'enableFlag',",
      "      type: FieldType.string,",
      "      label: intl.get('tarzan.common.label.enableFlag').d('启用状态'),",
      "      lovPara: {",
      "        tenantId,",
      "      },",
      "      lookupCode: 'MT.ENABLE_FLAG',",
      "    },",
      "  ],",
      "  fields: [",
      "    {",
      "      name: 'materialCode',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.materialCode`).d('物料编码'),",
      "    },",
      "    {",
      "      name: 'inspectItemType',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.inspectItemType`).d('检验项目类型'),",
      "      textField: 'description',",
      "      valueField: 'typeCode',",
      "      lovPara: { tenantId },",
      "      lookupUrl: `${BASIC.TARZAN_COMMON}/v1/${tenantId}/mt-gen-type/combo-box/ui?typeGroup=INSPECT_ITEM_TYPE`,",
      "      lookupAxiosConfig: {",
      "        transformResponse(data) {",
      "          // data会有缓存，第一次查询得到结果为JSON字符串，再后来得到的是数组",
      "          if (data instanceof Array) {",
      "            return data;",
      "          }",
      "          const { rows } = JSON.parse(data);",
      "          return rows;",
      "        },",
      "      },",
      "    },",
      "    {",
      "      name: 'stringLable',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.siteCode`).d('string类型'),",
      "    },",
      "    {",
      "      name: 'planStartTime',",
      "      type: FieldType.dateTime,",
      "      label: intl.get(`${modelPrompt}.planStartTimeFrom`).d('计划开始时间从'),",
      "    },",
      "    {",
      "      name: 'planEndTime',",
      "      type: FieldType.dateTime,",
      "      label: intl.get(`${modelPrompt}.planStartTimeTo`).d('计划开始时间至'),",
      "    },",
      "    {",
      "      name: 'enableFlag',",
      "      type: FieldType.string,",
      "      label: intl.get(`tarzan.common.label.enableFlag`).d('启用状态'),",
      "      lookupCode: 'MT.ENABLE_FLAG',",
      "    },",
      "  ],",
      "  record: {",
      "    dynamicProps: {",
      "      // 只可选择enableFlag不为N的数据",
      "      selectable: record => record?.get('enableFlag') !== 'N',",
      "    },",
      "  },",
      "  transport: {",
      "    read: () => {",
      "      return {",
      "        url: `${BASIC.TARZAN_MODEL}/v1/${tenantId}/mt-mod-site/query/ui`,",
      "        method: 'GET',",
      "      };",
      "    },",
      "  },",
      "});",
      "",
      "const lineDS: () => DataSetProps = () => ({",
      "  autoQuery: false,",
      "  autoCreate: false,",
      "  selection: false,",
      "  dataKey: 'rows.content', // 列表数据在接口返回json中的相对路径",
      "  totalKey: 'rows.totalElements',",
      "  primaryKey: 'materialId', // 表格唯一性主键",
      "  fields: [",
      "    {",
      "      name: 'materialCode',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.materialCode`).d('物料编码'),",
      "    },",
      "    {",
      "      name: 'inspectItemType',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.inspectItemType`).d('检验项目类型'),",
      "      textField: 'description',",
      "      valueField: 'typeCode',",
      "      lovPara: { tenantId },",
      "      lookupUrl: `${BASIC.TARZAN_COMMON}/v1/${tenantId}/mt-gen-type/combo-box/ui?typeGroup=INSPECT_ITEM_TYPE`,",
      "      lookupAxiosConfig: {",
      "        transformResponse(data) {",
      "          // data会有缓存，第一次查询得到结果为JSON字符串，再后来得到的是数组",
      "          if (data instanceof Array) {",
      "            return data;",
      "          }",
      "          const { rows } = JSON.parse(data);",
      "          return rows;",
      "        },",
      "      },",
      "    },",
      "    {",
      "      name: 'stringLable',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.siteCode`).d('string类型'),",
      "    },",
      "    {",
      "      name: 'planStartTime',",
      "      type: FieldType.dateTime,",
      "      label: intl.get(`${modelPrompt}.planStartTimeFrom`).d('计划开始时间从'),",
      "    },",
      "    {",
      "      name: 'planEndTime',",
      "      type: FieldType.dateTime,",
      "      label: intl.get(`${modelPrompt}.planStartTimeTo`).d('计划开始时间至'),",
      "    },",
      "    {",
      "      name: 'enableFlag',",
      "      type: FieldType.string,",
      "      label: intl.get(`tarzan.common.label.enableFlag`).d('启用状态'),",
      "      lookupCode: 'MT.ENABLE_FLAG',",
      "    },",
      "  ],",
      "  transport: {",
      "    read: () => {",
      "      return {",
      "        url: `${BASIC.TARZAN_MODEL}/v1/${tenantId}/mt-mod-site/query/ui`,",
      "        method: 'GET',",
      "      };",
      "    },",
      "  },",
      "});",
      "",
      "export { headDS, lineDS };"
    ],
    "description": "头行表列表页的DS"
  },
  "单表格列表页": {
    "prefix": "t_single_table_list_page",
    "body": [
      "import React, { useMemo, useCallback } from 'react';",
      "import { observer } from 'mobx-react';",
      "import { Table, DataSet, Dropdown, Menu } from 'choerodon-ui/pro';",
      "import { Badge, Tag } from 'choerodon-ui';",
      "import { Button as PermissionButton } from 'components/Permission';",
      "import { Header, Content } from 'components/Page';",
      "import withProps from 'utils/withProps';",
      "import { ButtonColor } from 'choerodon-ui/pro/lib/button/enum';",
      "import intl from 'utils/intl';",
      "import formatterCollections from 'utils/intl/formatterCollections';",
      "import { ColumnProps } from 'choerodon-ui/pro/lib/table/Column';",
      "import { ColumnAlign, TableQueryBarType } from 'choerodon-ui/pro/lib/table/enum';",
      "import { useRequest } from '@components/tarzan-hooks';",
      "import { PostMethod } from '../services';",
      "import { tableDS } from '../stores';",
      "",
      "const modelPrompt = 'modelPrompt_code';",
      "",
      "const XxxxList = observer((props) => {",
      "  const {",
      "    match: { path },",
      "    tableDs,",
      "    history,",
      "  } = props;",
      "",
      "  const { run: postMethod, loading: postLoading } = useRequest(PostMethod(), { manual: true, needPromise: true }); // 手动查询，需要promise",
      "",
      "  const columns: ColumnProps[] = useMemo(() => {",
      "    return [",
      "      {",
      "        name: 'materialCode',",
      "        renderer: ({ value, record }) => {",
      "          return (",
      "            <a",
      "              onClick={() => {",
      "                history.push(`/detail_page_route/${record!.get('materialId')}`);",
      "              }}",
      "            >",
      "              {value}",
      "            </a>",
      "          );",
      "        },",
      "      },",
      "      {",
      "        name: 'inspectItemType',",
      "        // 若需要tag",
      "        // renderer: ({ record, value }) => {",
      "        //   switch (value) {",
      "        //     case 'NEW':",
      "        //       return (<Tag className=\"hcm-tag-green\">{record!.get('inspectItemTypeDesc')}</Tag>);",
      "        //     case 'USABLE':",
      "        //       return (<Tag className=\"hcm-tag-blue\">{record!.get('inspectItemTypeDesc')}</Tag>);",
      "        //     case 'CLOSED':",
      "        //       return (<Tag className=\"hcm-tag-purple\">{record!.get('inspectItemTypeDesc')}</Tag>);",
      "        //     default:",
      "        //       return '';",
      "        //   }",
      "        // },",
      "      },",
      "      { name: 'planStartTime' },",
      "      { name: 'planEndTime' },",
      "      {",
      "        name: 'enableFlag',",
      "        // width: 100,",
      "        align: ColumnAlign.center,",
      "        renderer: ({ value }) => (",
      "          <Badge",
      "            status={value === 'Y' ? 'success' : 'error'}",
      "            text={",
      "              value === 'Y'",
      "                ? intl.get(`tarzan.common.label.enable`).d('启用')",
      "                : intl.get(`tarzan.common.label.disable`).d('禁用')",
      "            }",
      "          />",
      "        ),",
      "      },",
      "    ];",
      "  }, []);",
      "",
      "  const handleAdd = useCallback(() => {",
      "    history.push(`/page_route/create`);",
      "  }, []);",
      "",
      "  const isAllTypeEqualInput = (value) => tableDs.selected.every((record) => record.get('inspectItemType') === value);",
      "",
      "  const clickMenu = useCallback(",
      "    (type: string) => {",
      "      postMethod({",
      "        params: {",
      "          ids: tableDs.selected.map(record => record.get('id')),",
      "          type,",
      "        },",
      "      })",
      "    },",
      "    [],",
      "  )",
      "",
      "  const menu = (",
      "    <Menu style={{ width: '100px' }}>",
      "      <Menu.Item disabled={!isAllTypeEqualInput('NEW')} key=\"CANCEL\">",
      "        <a target=\"_blank\" rel=\"noopener noreferrer\" onClick={() => clickMenu('CANCEL')}>",
      "          {intl.get(`${modelPrompt}.button.cancel`).d('取消')}",
      "        </a>",
      "      </Menu.Item>",
      "      <Menu.Item disabled={!isAllTypeEqualInput('CANCEL')} key=\"CLOSED\">",
      "        <a target=\"_blank\" rel=\"noopener noreferrer\" onClick={() => clickMenu('CLOSED')}>",
      "          {intl.get(`${modelPrompt}.button.close`).d('关闭')}",
      "        </a>",
      "      </Menu.Item>",
      "    </Menu>",
      "  );",
      "",
      "  return (",
      "    <div className=\"hmes-style\">",
      "      <Header title={intl.get(`${modelPrompt}.title.list`).d('单表格的列表页')}>",
      "        <PermissionButton",
      "          type=\"c7n-pro\"",
      "          color={ButtonColor.primary}",
      "          icon=\"add\"",
      "          onClick={handleAdd}",
      "          permissionList={[",
      "            {",
      "              code: `${path}.button.edit`,",
      "              type: 'button',",
      "              meaning: '列表页-编辑新建删除复制按钮',",
      "            },",
      "          ]}",
      "        >",
      "          {intl.get('tarzan.common.button.create').d('新建')}",
      "        </PermissionButton>",
      "        <Dropdown",
      "          overlay={menu}",
      "          disabled={!tableDs.selected.length}",
      "        >",
      "          <PermissionButton",
      "            type=\"c7n-pro\"",
      "            icon=\"cached\"",
      "            disabled={!tableDs.selected.length}",
      "            loading={postLoading}",
      "            permissionList={[",
      "              {",
      "                code: `${path}.button.edit`,",
      "                type: 'button',",
      "                meaning: '列表页-编辑新建删除复制按钮',",
      "              },",
      "            ]}",
      "          >",
      "            {intl.get(`${modelPrompt}.button.changeStatus`).d('状态变更')}",
      "          </PermissionButton>",
      "        </Dropdown>",
      "      </Header>",
      "      <Content>",
      "        <Table",
      "          queryBar={TableQueryBarType.filterBar}",
      "          queryBarProps={{",
      "            fuzzyQuery: false,",
      "          }}",
      "          dataSet={tableDs}",
      "          columns={columns}",
      "          searchCode=\"page_searchCode\"",
      "          customizedCode=\"page_customizedCode\"",
      "        />",
      "      </Content>",
      "    </div>",
      "  );",
      "})",
      "",
      "export default formatterCollections({",
      "  code: [modelPrompt, 'tarzan.common'],",
      "})(",
      "  withProps(",
      "    () => {",
      "      const tableDs = new DataSet({",
      "        ...tableDS(),",
      "      });",
      "      return {",
      "        tableDs,",
      "      };",
      "    },",
      "    // cacheState: 是否缓存数据",
      "    // cleanWhenClose: 关闭 tabs 时,是否自动清空缓存",
      "    // keepOriginDataSet: 是否保持原来的 DataSet 对象，不保留的话，会根据缓存的数据重查",
      "    { cacheState: true, cleanWhenClose: true, keepOriginDataSet: false },",
      "  )(XxxxList),",
      ");",
      ""
    ],
    "description": "单表格列表页"
  },
  "单表格列表页的DS": {
    "prefix": "t_single_table_list_page_ds",
    "body": [
      "import intl from 'utils/intl';",
      "import { DataSetSelection, FieldIgnore, FieldType } from 'choerodon-ui/pro/lib/data-set/enum';",
      "import { DataSetProps } from 'choerodon-ui/pro/lib/data-set/DataSet';",
      "import { getCurrentOrganizationId } from 'utils/utils';",
      "import moment from 'moment';",
      "import { BASIC } from '@utils/config';",
      "",
      "const modelPrompt = 'modelPrompt_code';",
      "const tenantId = getCurrentOrganizationId();",
      "",
      "const tableDS: () => DataSetProps = () => ({",
      "  autoQuery: true,",
      "  autoCreate: false,",
      "  selection: DataSetSelection.multiple,",
      "  dataKey: 'rows.content', // 列表数据在接口返回json中的相对路径",
      "  totalKey: 'rows.totalElements',",
      "  primaryKey: 'materialId', // 表格唯一性主键",
      "  queryFields: [",
      "    {",
      "      name: 'siteLov',",
      "      type: FieldType.object,",
      "      label: intl.get(`${modelPrompt}.siteCode`).d('站点编码'),",
      "      lovCode: 'MT.MODEL.SITE',",
      "      lovPara: {",
      "        tenantId,",
      "      },",
      "      ignore: FieldIgnore.always,",
      "    },",
      "    {",
      "      name: 'siteId',",
      "      type: FieldType.number,",
      "      bind: 'siteLov.siteId',",
      "    },",
      "    {",
      "      name: 'enableFlag',",
      "      type: FieldType.string,",
      "      label: intl.get('tarzan.common.label.enableFlag').d('启用状态'),",
      "      lovPara: {",
      "        tenantId,",
      "      },",
      "      lookupCode: 'MT.ENABLE_FLAG',",
      "    },",
      "    {",
      "      name: 'stringLable',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.siteCode`).d('string类型'),",
      "    },",
      "    {",
      "      name: 'planStartTime',",
      "      type: FieldType.dateTime,",
      "      max: 'planEndTime',",
      "      label: intl.get(`${modelPrompt}.planStartTimeFrom`).d('计划开始时间从'),",
      "      defaultValue: moment(new Date()).format('YYYY-MM-DD 00:00:00'),",
      "      // defaultValue: moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),",
      "    },",
      "    {",
      "      name: 'planEndTime',",
      "      type: FieldType.dateTime,",
      "      min: 'planStartTime',",
      "      label: intl.get(`${modelPrompt}.planStartTimeTo`).d('计划开始时间至'),",
      "      defaultValue: moment(new Date()).format('YYYY-MM-DD 23:59:59'),",
      "    },",
      "  ],",
      "  fields: [",
      "    {",
      "      name: 'materialCode',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.materialCode`).d('物料编码'),",
      "    },",
      "    {",
      "      name: 'inspectItemType',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.inspectItemType`).d('检验项目类型'),",
      "      textField: 'description',",
      "      valueField: 'typeCode',",
      "      lovPara: { tenantId },",
      "      lookupUrl: `${BASIC.TARZAN_COMMON}/v1/${tenantId}/mt-gen-type/combo-box/ui?typeGroup=INSPECT_ITEM_TYPE`,",
      "      lookupAxiosConfig: {",
      "        transformResponse(data) {",
      "          // data会有缓存，第一次查询得到结果为JSON字符串，再后来得到的是数组",
      "          if (data instanceof Array) {",
      "            return data;",
      "          }",
      "          const { rows } = JSON.parse(data);",
      "          return rows;",
      "        },",
      "      },",
      "    },",
      "    {",
      "      name: 'stringLable',",
      "      type: FieldType.string,",
      "      label: intl.get(`${modelPrompt}.siteCode`).d('string类型'),",
      "    },",
      "    {",
      "      name: 'planStartTime',",
      "      type: FieldType.dateTime,",
      "      label: intl.get(`${modelPrompt}.planStartTimeFrom`).d('计划开始时间从'),",
      "    },",
      "    {",
      "      name: 'planEndTime',",
      "      type: FieldType.dateTime,",
      "      label: intl.get(`${modelPrompt}.planStartTimeTo`).d('计划开始时间至'),",
      "    },",
      "    {",
      "      name: 'enableFlag',",
      "      type: FieldType.string,",
      "      label: intl.get(`tarzan.common.label.enableFlag`).d('启用状态'),",
      "      lookupCode: 'MT.ENABLE_FLAG',",
      "    },",
      "  ],",
      "  record: {",
      "    dynamicProps: {",
      "      // 只可选择enableFlag不为N的数据",
      "      selectable: record => record?.get('enableFlag') !== 'N',",
      "    },",
      "  },",
      "  transport: {",
      "    read: () => {",
      "      return {",
      "        url: `${BASIC.TARZAN_MODEL}/v1/${tenantId}/mt-mod-site/query/ui`,",
      "        method: 'GET',",
      "      };",
      "    },",
      "  },",
      "});",
      "",
      "export { tableDS };"
    ],
    "description": "单表格列表页的DS"
  },
  "基础接口定义": {
    "prefix": "t_services",
    "body": [
      "import { getCurrentOrganizationId } from 'utils/utils';",
      "import { BASIC } from '@utils/config';",
      "",
      "const tenantId = getCurrentOrganizationId();",
      "",
      "// Get请求",
      "export function GetMethod() {",
      "  return {",
      "    url: `${BASIC.TARZAN_MODEL}/v1/${tenantId}/list/ui`,",
      "    method: 'GET',",
      "  };",
      "}",
      "",
      "// Post请求",
      "export function PostMethod() {",
      "  return {",
      "    url: `${BASIC.TARZAN_MODEL}/v1/${tenantId}/save/ui`,",
      "    method: 'POST',",
      "  };",
      "}",
      ""
    ],
    "description": "基础接口定义"
  }
}