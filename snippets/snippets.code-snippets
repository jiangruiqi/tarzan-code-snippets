{
	// Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Normal List Page In TS": {
		"scope": "typescriptreact",
		"prefix": "list_page_normal_ts",
		"body": [
			"import React, { useMemo, useCallback } from 'react';",
			"import { Table, DataSet } from 'choerodon-ui/pro';",
			"import { Button as PermissionButton } from 'components/Permission';",
			"import { Header, Content } from 'components/Page';",
			"import withProps from 'utils/withProps';",
			"import { ButtonColor } from 'choerodon-ui/pro/lib/button/enum';",
			"import intl from 'utils/intl';",
			"import formatterCollections from 'utils/intl/formatterCollections';",
			"import { ColumnProps } from 'choerodon-ui/pro/lib/table/Column';",
			"import { ColumnAlign, TableQueryBarType } from 'choerodon-ui/pro/lib/table/enum';",
			"import { GenTypeRender, GenStatusRender } from '@components/tarzan-ui';",
			"import { tableDS } from '../stores';",
			"",
			"const modelPrompt = 'modelPrompt_code';",
			"",
			"const XxxxList = (props) => {",
			"  const {",
			"    match: { path },",
			"    tableDs,",
			"    history,",
			"  } = props;",
			"",
			"  const columns: ColumnProps[] = useMemo(() => {",
			"    return [",
			"      {",
			"        name: 'code',",
			"        renderer: ({ value, record }) => {",
			"          return (",
			"            <a",
			"              onClick={() => {",
			"                history.push(`/detail_page_route/${record!.get('id')}`);",
			"              }}",
			"            >",
			"              {value}",
			"            </a>",
			"          );",
			"        },",
			"      },",
			"      {",
			"        name: 'safetyStockMethod',",
			"        width: 140,",
			"        align: ColumnAlign.center,",
			"        renderer: (props) => <GenTypeRender {...props} />,",
			"      },",
			"    ];",
			"  }, []);",
			"",
			"  const handleAdd = useCallback(() => {",
			"    history.push(`/page_route/create`);",
			"  }, []);",
			"",
			"  return (",
			"    <div className=\"hmes-style\">",
			"      <Header title={intl.get(`\\${modelPrompt}.title.list`).d('page_name')}>",
			"        <PermissionButton",
			"          type=\"c7n-pro\"",
			"          color={ButtonColor.primary}",
			"          icon=\"add\"",
			"          onClick={handleAdd}",
			"          permissionList={[",
			"            {",
			"              code: `\\${path}.button.edit`,",
			"              type: 'button',",
			"              meaning: '列表页-编辑新建删除复制按钮',",
			"            },",
			"          ]}",
			"        >",
			"          {intl.get('tarzan.common.button.create').d('新建')}",
			"        </PermissionButton>",
			"      </Header>",
			"      <Content>",
			"        <Table",
			"          queryBar={TableQueryBarType.filterBar}",
			"          queryBarProps={{",
			"            fuzzyQuery: false,",
			"          }}",
			"          dataSet={tableDs}",
			"          columns={columns}",
			"          searchCode=\"page_searchCode\"",
			"          customizedCode=\"page_customizedCode\"",
			"        />",
			"      </Content>",
			"    </div>",
			"  );",
			"}",
			"",
			"export default formatterCollections({",
			"  code: [modelPrompt, 'tarzan.common'],",
			"})(",
			"  withProps(",
			"    () => {",
			"      const tableDs = new DataSet({",
			"        ...tableDS(),",
			"      });",
			"      return {",
			"        tableDs,",
			"      };",
			"    },",
			"    // cacheState: 是否缓存数据",
			"    // cleanWhenClose: 关闭 tabs 时,是否自动清空缓存",
			"    // keepOriginDataSet: 是否保持原来的 DataSet 对象，不保留的话，会根据缓存的数据重查",
			"    { cacheState: true, cleanWhenClose: true, keepOriginDataSet: false },",
			"  )(XxxxList),",
			");"
		],
		"description": "基础的ts列表页，应放在xxxxList文件夹下，index.tsx文件中"
	},
	"Normal List Page DS In TS": {
		"scope": "typescriptreact,typescript",
		"prefix": "list_page_DS_normal_ts",
		"body": [
			"import intl from 'utils/intl';",
			"import { FieldIgnore, FieldType } from 'choerodon-ui/pro/lib/data-set/enum';",
			"import { DataSetProps } from 'choerodon-ui/pro/lib/data-set/DataSet';",
			"import { getCurrentOrganizationId } from 'utils/utils';",
			"import { BASIC } from '@utils/config';",
			"",
			"const modelPrompt = 'modelPrompt_code';",
			"const tenantId = getCurrentOrganizationId();",
			"",
			"const tableDS: () => DataSetProps = () => ({",
			"  autoQuery: true,",
			"  autoCreate: false,",
			"  selection: false,",
			"  dataKey: 'rows.content',",
			"  totalKey: 'rows.totalElements',",
			"  primaryKey: 'id',",
			"  queryFields: [",
			"    {",
			"      name: 'materialLov',",
			"      type: FieldType.object,",
			"      label: intl.get(`\\${modelPrompt}.materialCode`).d('物料编码'),",
			"      lovCode: 'MT.METHOD.MATERIAL',",
			"      lovPara: {",
			"        tenantId,",
			"      },",
			"      ignore: FieldIgnore.always,",
			"    },",
			"    {",
			"      name: 'materialId',",
			"      type: FieldType.number,",
			"      bind: 'materialLov.materialId',",
			"    },",
			"  ],",
			"  fields: [",
			"    {",
			"      name: 'materialCode',",
			"      type: FieldType.string,",
			"      label: intl.get(`\\${modelPrompt}.materialCode`).d('物料编码'),",
			"    },",
			"    {",
			"      name: 'enableFlag',",
			"      type: FieldType.string,",
			"      label: intl.get(`tarzan.common.label.enableFlag`).d('启用状态'),",
			"      lookupCode: 'MT.ENABLE_FLAG',",
			"      trueValue: 'Y',",
			"      falseValue: 'N',",
			"    },",
			"    {",
			"      name: 'safetyStockMethod',",
			"      type: FieldType.string,",
			"      label: intl.get(`\\${modelPrompt}.safetyStockMethod`).d('安全库存方法'),",
			"      lookupUrl: `\\${BASIC.ServiceCode}/v1/\\${tenantId}/mt-gen-type/combo-box/ui?typeGroup=SAFETY_STOCK_METHOD`,",
			"      valueField: 'typeCode',",
			"      textField: 'description',",
			"      lookupAxiosConfig: {",
			"        transformResponse(data) {",
			"          // data会有缓存，第一次查询得到结果为JSON字符串，再后来得到的是数组",
			"          if (data instanceof Array) {",
			"            return data;",
			"          }",
			"          const { rows } = JSON.parse(data);",
			"          return rows;",
			"        },",
			"      },",
			"    },",
			"  ],",
			"  transport: {",
			"    read: () => {",
			"      return {",
			"        url: `\\${BASIC.ServiceCode}/v1/\\${tenantId}/queryUrl`,",
			"        method: 'GET',",
			"      };",
			"    },",
			"  },",
			"});",
			"",
			"export { tableDS };"
		],
		"description": "基础的ts DataSet，应放在stores文件夹下，index.ts文件中"
	},
	"Normal Detail Page In TS": {
		"scope": "typescriptreact",
		"prefix": "detail_page_normal_ts",
		"body": [
			"",
			"import React, { useState, useEffect, useMemo, useCallback } from 'react';",
			"import {",
			"  DataSet,",
			"  Modal,",
			"  Tabs,",
			"  Button,",
			"  Form,",
			"  Lov,",
			"  NumberField,",
			"  Switch,",
			"  TextField,",
			"  Select,",
			"} from 'choerodon-ui/pro';",
			"import { Collapse } from 'choerodon-ui';",
			"import notification from 'utils/notification';",
			"import { useDataSetEvent } from 'utils/hooks';",
			"import { Button as PermissionButton } from 'components/Permission';",
			"import { Header, Content } from 'components/Page';",
			"import { ButtonColor } from 'choerodon-ui/pro/lib/button/enum';",
			"import intl from 'utils/intl';",
			"import formatterCollections from 'utils/intl/formatterCollections';",
			"import { AttributeDrawer, drawerPropsC7n, TarzanSpin, RevisionLovC7n } from '@components/tarzan-ui';",
			"import { useRequest } from '@components/tarzan-hooks';",
			"import { BASIC } from '@utils/config';",
			"import CopyDrawer from './CopyDrawer';",
			"import DetailPageTable from './DetailPageTable';",
			"import { detailDS, copyDS } from '../stories/DetailDS';",
			"// import { SaveMaterialPlan } from '../services';",
			"",
			"// ****************接口信息需放在services/index.ts中**************",
			"// import { getCurrentOrganizationId } from 'utils/utils';",
			"// import { BASIC } from '@utils/config';",
			"",
			"const tenantId = getCurrentOrganizationId();",
			"",
			"",
			"/**",
			" * 保存物料计划属性",
			" * @function SaveMaterialPlan",
			" * @returns {object} fetch Promise",
			" */",
			"export function SaveMaterialPlan(): object {",
			"  return {",
			"    url: `\\${BASIC.ServiceCode}/v1/\\${tenantId}/mt-pfep-schedule/update/ui`,",
			"    method: 'POST',",
			"  };",
			"}",
			"// ************************************************************",
			"",
			"const { Panel } = Collapse;",
			"const TabPane = Tabs.TabPane;",
			"const TABLENAME = 'attr_table_name';",
			"const modelPrompt = 'modelPrompt_code';",
			"",
			"const XxxxDetail = (props) => {",
			"  const {",
			"    history,",
			"    match: { path, params },",
			"  } = props;",
			"  const kid = params.id;",
			"",
			"  const [canEdit, setCanEdit] = useState(false);",
			"  const detailDs = useMemo(() => new DataSet(detailDS()), []);",
			"  const copyDs = useMemo(() => new DataSet(copyDS()), []);",
			"  const { run: saveMaterialPlan, loading: saveLoading } = useRequest(SaveMaterialPlan(), { manual: true, needPromise: true });",
			"",
			"  useDataSetEvent(detailDs, 'update', ({ name, record, value }) => {",
			"    switch (name) {",
			"      case 'materialLov':",
			"        record.set('productionVersionLov', {});",
			"        record.set('defaultBomLov', {});",
			"        record.set('defaultRouterLov', {});",
			"        break;",
			"      default:",
			"        break;",
			"    }",
			"  });",
			"",
			"  useEffect(() => {",
			"    if (kid === 'create') {",
			"      // 新建时",
			"      setCanEdit(true);",
			"      return;",
			"    }",
			"    // 编辑时",
			"    detailDs.setQueryParameter('kid', kid);",
			"    detailDs.query();",
			"  }, [kid]);",
			"",
			"  const handleEdit = useCallback(() => {",
			"    setCanEdit(true);",
			"  }, []);",
			"",
			"  const handleCancel = useCallback(",
			"    () => {",
			"      if (kid === 'create') {",
			"        history.push('/list_page_route')",
			"      } else {",
			"        setCanEdit(false);",
			"        detailDs.query();",
			"      }",
			"    },",
			"    [],",
			"  );",
			"",
			"  const handleSave = async () => {",
			"    const validateFlag = await detailDs.validate();",
			"    if (!validateFlag) {",
			"      return false;",
			"    }",
			"    const queryParams = detailDs!.current!.toData();",
			"    queryParams.kid = kid === 'create' ? null : kid;",
			"    const res = await saveMaterialPlan({ params: { ...queryParams } });",
			"    if (res && res.success) {",
			"      notification.success({});",
			"      setCanEdit(false);",
			"      history.push(`/detail_page_route/\\${res.rows.kid}`);",
			"      return true;",
			"    }",
			"    return false;",
			"  }",
			"",
			"  const handleCopy = () => {",
			"    copyDs.loadData([{}]);",
			"    Modal.open({",
			"      ...drawerPropsC7n({ ds: copyDs }),",
			"      key: Modal.key(),",
			"      title: intl.get('tarzan.common.button.copy').d('复制'),",
			"      style: {",
			"        width: 720, // 3中宽度可选，360/720/1080",
			"      },",
			"      children: <CopyDrawer ds={copyDs} />,",
			"      onOk: handleCopyConfirm,",
			"    });",
			"  }",
			"",
			"  const handleCopyConfirm = async () => {",
			"    await new Promise(() => {",
			"      setTimeout(() => {",
			"        console.log('执行内容')",
			"      }, 1000);",
			"    })",
			"    return true;",
			"  }",
			"",
			"  return (",
			"    <div className='hmes-style'>",
			"      <TarzanSpin dataSet={detailDs} spinning={saveLoading}>",
			"        <Header",
			"          title={intl.get(`\\${modelPrompt}.title.list`).d('物料计划属性维护')}",
			"          backPath='/list_page_route'",
			"        >",
			"          {canEdit ? (",
			"            <>",
			"              <Button",
			"                color={ButtonColor.primary}",
			"                icon=\"save\"",
			"                onClick={handleSave}",
			"              >",
			"                {intl.get('tarzan.common.button.save').d('保存')}",
			"              </Button>",
			"              <Button",
			"                icon=\"close\"",
			"                onClick={handleCancel}",
			"              >",
			"                {intl.get('tarzan.common.button.cancel').d('取消')}",
			"              </Button>",
			"            </>",
			"          ) : (",
			"            <PermissionButton",
			"              type=\"c7n-pro\"",
			"              icon=\"edit-o\"",
			"              color={ButtonColor.primary}",
			"              onClick={handleEdit}",
			"              permissionList={[",
			"                {",
			"                  code: `\\${path}.button.edit`,",
			"                  type: 'button',",
			"                  meaning: '详情页-编辑新建删除复制按钮',",
			"                },",
			"              ]}",
			"            >",
			"              {intl.get('tarzan.common.button.edit').d('编辑')}",
			"            </PermissionButton>",
			"          )}",
			"          <AttributeDrawer",
			"            disabled={kid === 'create'}",
			"            tablename={TABLENAME}",
			"            kid={kid}",
			"            canEdit={canEdit}",
			"            serverCode={BASIC.TARZAN_METHOD}",
			"          />",
			"          <PermissionButton",
			"            type=\"c7n-pro\"",
			"            icon=\"content_copy-o\"",
			"            onClick={handleCopy}",
			"            disabled={canEdit}",
			"            permissionList={[",
			"              {",
			"                code: `\\${path}.button.edit`,",
			"                type: 'button',",
			"                meaning: '详情页-编辑新建删除复制按钮',",
			"              },",
			"            ]}",
			"          >",
			"            {intl.get('tarzan.common.button.copy').d('复制')}",
			"          </PermissionButton>",
			"        </Header>",
			"        <Content>",
			"          <Collapse",
			"            bordered={false}",
			"            defaultActiveKey={[",
			"              'basic',",
			"            ]}",
			"          >",
			"            <Panel",
			"              key=\"basic\"",
			"              header={intl.get(`\\${modelPrompt}.title.basic`).d('基础属性')}",
			"            >",
			"              <Form dataSet={detailDs} columns={3} disabled={!canEdit} labelWidth={112}>",
			"",
			"              </Form>",
			"            </Panel>",
			"          </Collapse>",
			"          <Tabs defaultActiveKey=\"tabKey1\">",
			"            <TabPane tab={intl.get(`\\${modelPrompt}.tabName`).d('Tab名称')} key=\"tabKey1\" dataSet={detailDs} forceRender>",
			"              <DetailPageTable canEdit={canEdit} ds={detailDs} />",
			"            </TabPane>",
			"          </Tabs>",
			"        </Content>",
			"      </TarzanSpin>",
			"    </div>",
			"  )",
			"};",
			"",
			"",
			"export default formatterCollections({",
			"  code: [modelPrompt, 'tarzan.common'],",
			"})(XxxxDetail);"
		],
		"description": "基础的ts详情页，应放在xxxxDetail文件夹下，index.tsx文件中"
	},
	"Normal Detail Page DS In TS": {
		"scope": "typescriptreact,typescript",
		"prefix": "detail_page_DS_normal_ts",
		"body": [
			"import intl from 'utils/intl';",
			"import { FieldIgnore, FieldType } from 'choerodon-ui/pro/lib/data-set/enum';",
			"import { DataSetProps } from 'choerodon-ui/pro/lib/data-set/DataSet';",
			"import { getCurrentOrganizationId } from 'utils/utils';",
			"import { BASIC } from '@utils/config';",
			"",
			"const modelPrompt = 'modelPrompt_code';",
			"const tenantId = getCurrentOrganizationId();",
			"",
			"const detailDS: () => DataSetProps = () => ({",
			"  selection: false,",
			"  autoQuery: false,",
			"  autoCreate: true,",
			"  paging: false,",
			"  forceValidate: true,",
			"  dataKey: 'rows',",
			"  fields: [",
			"    {",
			"      name: 'dsLovField',",
			"      type: FieldType.object,",
			"      label: intl.get(`\\${modelPrompt}.dsLovFieldCode`).d('xxxx'),",
			"      lovCode: 'MT.METHOD.MATERIAL',",
			"      lovPara: {",
			"        tenantId,",
			"      },",
			"      required: true,",
			"      ignore: FieldIgnore.always,",
			"    },",
			"    {",
			"      name: 'dsLovFieldId',",
			"      type: FieldType.number,",
			"      bind: 'dsLovField.dsLovFieldId',",
			"    },",
			"    {",
			"      name: 'dsLovFieldCode',",
			"      type: FieldType.string,",
			"      bind: 'dsLovField.dsLovFieldCode',",
			"    },",
			"    {",
			"      name: 'dsField',",
			"      type: FieldType.string,",
			"      label: intl.get(`\\${modelPrompt}.dsField`).d('xxxx'),",
			"    },",
			"  ],",
			"  transport: {",
			"    read: () => {",
			"      return {",
			"        url: `\\${BASIC.ServiceCode}/v1/\\${tenantId}/queryUrl`,",
			"        method: 'GET',",
			"      };",
			"    },",
			"  },",
			"});",
			"export { detailDS };"
		],
		"description": "基础的ts DataSet，应放在stores文件夹下，index.ts文件中"
	},
	"Edit Table In Row": {
		"scope": "typescriptreact",
		"prefix": "edit_table_in_row",
		"body": [
			"import React, { useMemo, useCallback } from 'react';",
			"import intl from 'utils/intl';",
			"import { Table, Button, NumberField } from 'choerodon-ui/pro';",
			"import { Popconfirm } from 'choerodon-ui';",
			"import { Button as PermissionButton } from 'components/Permission';",
			"import { FuncType } from 'choerodon-ui/pro/lib/button/enum';",
			"import { Size } from 'choerodon-ui/pro/lib/core/enum';",
			"import { ColumnProps } from 'choerodon-ui/pro/lib/table/Column';",
			"import { ColumnAlign, ColumnLock } from 'choerodon-ui/pro/lib/table/enum';",
			"",
			"export default ({ ds, canEdit }) => {",
			"",
			"  const handleAdd = useCallback(",
			"    () => {",
			"      ds.create(",
			"        {",
			"          priority: 123,",
			"        },",
			"        0,",
			"      );",
			"    },",
			"    [ds],",
			"  );",
			"",
			"  // const handleEdit = useCallback(",
			"  //   (record) => {",
			"  //     record.setState('editing', true);",
			"  //   },",
			"  //   [ds],",
			"  // );",
			"",
			"  // const handleCancel = useCallback(",
			"  //   record => {",
			"  //     if (record.status === 'add') {",
			"  //       ds.remove(record);",
			"  //     } else {",
			"  //       record.reset();",
			"  //       record.setState('editing', false);",
			"  //     }",
			"  //   },",
			"  //   [ds],",
			"  // );",
			"",
			"  const columns: ColumnProps[] = useMemo(",
			"    () => [",
			"      {",
			"        header: () => (",
			"          <Button",
			"            icon=\"add\"",
			"            disabled={!canEdit}",
			"            funcType={FuncType.flat}",
			"            onClick={handleAdd}",
			"            size={Size.small}",
			"          />",
			"        ),",
			"        align: ColumnAlign.center,",
			"        width: 60,",
			"        renderer: ({ record }) => (",
			"          <Popconfirm",
			"            title={intl.get(`hzero.common.message.confirm.delete`).d('是否确认删除?')}",
			"            onConfirm={() => {",
			"              ds.remove(record);",
			"            }}",
			"          >",
			"            <Button icon=\"remove\" disabled={!canEdit} funcType={FuncType.flat} size={Size.small} />",
			"          </Popconfirm>",
			"        ),",
			"        lock: ColumnLock.left,",
			"      },",
			"      {",
			"        name: 'dsField',",
			"        align: ColumnAlign.center,",
			"        width: 100,",
			"        editor: () => canEdit && <NumberField name=\"dsField\" nonStrictStep />,",
			"        // 加编辑按钮的editor写法",
			"        // editor: record => record.getState('editing') && <NumberField name=\"dsField\" nonStrictStep />,",
			"      },",
			"      // {",
			"      //   header: intl.get('tarzan.common.label.action').d('操作'),",
			"      //   align: ColumnAlign.center,",
			"      //   width: 120,",
			"      //   renderer: ({ record }: { record?}) => {",
			"      //     if (record && record.getState('editing')) {",
			"      //       return (",
			"      //         <>",
			"      //           <a onClick={() => handleCancel(record)} style={{ marginRight: '0.1rem' }}>",
			"      //             {intl.get('tarzan.common.button.cancel').d('取消')}",
			"      //           </a>",
			"      //           <a onClick={() => handleSubmit(record)}>",
			"      //             {intl.get('tarzan.common.button.save').d('保存')}",
			"      //           </a>",
			"      //         </>",
			"      //       );",
			"      //     }",
			"      //     return (",
			"      //       <PermissionButton",
			"      //         permissionList={[",
			"      //           {",
			"      //             code: `${path}.button.edit`,",
			"      //             type: 'button',",
			"      //             meaning: '列表页-编辑新建删除复制按钮',",
			"      //           },",
			"      //         ]}",
			"      //         type=\"text\"",
			"      //         onClick={() => handleEdit(record)}",
			"      //       >",
			"      //         {intl.get('tarzan.common.button.edit').d('编辑')}",
			"      //       </PermissionButton>",
			"      //     );",
			"",
			"      //   },",
			"      // },",
			"    ],",
			"    [],",
			"  );",
			"",
			"  return (",
			"    <Table",
			"      dataSet={ds}",
			"      columns={columns}",
			"      filter={record => {",
			"        return record.status !== 'delete';",
			"      }}",
			"    />",
			"  );",
			"};",
			""
		],
		"description": "基础的行内编辑表格"
	},
	"Edit Table In Modal": {
		"scope": "typescriptreact",
		"prefix": "edit_table_in_modal",
		"body": [
			"import React, { useMemo } from 'react';",
			"import {",
			"  DataSet,",
			"  Table,",
			"  Modal,",
			"  Button,",
			"  Form,",
			"  TextField,",
			"} from 'choerodon-ui/pro';",
			"import { Popconfirm } from 'choerodon-ui';",
			"import intl from 'utils/intl';",
			"import { Record } from 'choerodon-ui/dataset';",
			"import { ColumnProps } from 'choerodon-ui/pro/lib/table/Column';",
			"import { ColumnAlign, ColumnLock } from 'choerodon-ui/pro/lib/table/enum';",
			"import { FuncType } from 'choerodon-ui/pro/lib/button/enum';",
			"import { Size } from 'choerodon-ui/pro/lib/core/enum';",
			"import { drawerPropsC7n } from '@components/tarzan-ui';",
			"// import { useRequest } from '@components/tarzan-hooks';",
			"// import notification from 'utils/notification';",
			"import { drawerDetailDS } from './stores/detailDS';",
			"",
			"const modelPrompt = 'modelPrompt_code';",
			"",
			"const EditTableInModal = ({ ds, canEdit }) => {",
			"  const detailDs = useMemo(() => new DataSet(drawerDetailDS()), []);",
			"",
			"  // const saveContainer = useRequest(SaveTableLine(), {",
			"  //   manual: true,",
			"  //   needPromise: true,",
			"  // });",
			"",
			"  const columns: ColumnProps[] = useMemo(() => {",
			"    return [",
			"      {",
			"        header: () => (",
			"          <Button",
			"            icon=\"add\"",
			"            disabled={!canEdit}",
			"            funcType={FuncType.flat}",
			"            onClick={() => handleEdit()}",
			"            size={Size.small}",
			"          />",
			"        ),",
			"        align: ColumnAlign.center,",
			"        width: 60,",
			"        renderer: ({ record }) => (",
			"          <Popconfirm",
			"            title={intl.get(`hzero.common.message.confirm.delete`).d('是否确认删除?')}",
			"            onConfirm={() => {",
			"              ds.remove(record);",
			"            }}",
			"          >",
			"            <Button icon=\"remove\" disabled={!canEdit} funcType={FuncType.flat} size={Size.small} />",
			"          </Popconfirm>",
			"        ),",
			"        lock: ColumnLock.left,",
			"      },",
			"      {",
			"        name: 'dsField',",
			"        width: 250,",
			"      },",
			"      {",
			"        header: intl.get('tarzan.common.label.action').d('操作'),",
			"        align: ColumnAlign.center,",
			"        width: 240,",
			"        lock: ColumnLock.right,",
			"        renderer: ({ record }) => {",
			"          return (",
			"            <span className=\"action-link\">",
			"              <a",
			"                disabled={!canEdit}",
			"                onClick={() => {",
			"                  handleEdit(record);",
			"                }}",
			"              >",
			"                {intl.get('tarzan.common.button.edit').d('编辑')}",
			"              </a>",
			"            </span>",
			"          );",
			"        },",
			"      },",
			"    ];",
			"  }, []);",
			"",
			"  const handleEdit = (record?: Record | null) => {",
			"    // 建议「表格」和「抽屉」分别用两个ds，便于使用平台个性化",
			"    let createFlag = true;",
			"    if (!record) {",
			"      detailDs.create({ xxxx: 'xxxx' });",
			"    } else {",
			"      detailDs.loadData([record.toData()]);",
			"      createFlag = false;",
			"    }",
			"    Modal.open({",
			"      ...drawerPropsC7n({ canEdit, detailDs }),",
			"      // canEdit=true,显示「确定」「取消」按钮",
			"      // canEdit=false,显示「返回」按钮",
			"      key: Modal.key(),",
			"      title: createFlag",
			"        ? intl.get(`${modelPrompt}.createContainer`).d('新建容器')",
			"        : intl.get(`${modelPrompt}.handleEdithandleEdit`).d('编辑容器'),",
			"      style: {",
			"        width: 720,",
			"      },",
			"      children: (",
			"        <Form labelWidth={112} dataSet={ds} columns={2} disabled={!canEdit}>",
			"          <TextField name=\"dsField\" />",
			"        </Form>",
			"      ),",
			"      afterClose: () => {",
			"        // 取消/返回的按钮逻辑建议放在afterClose中",
			"        // drawerPropsC7n中，会默认执行ds?.reset();",
			"        detailDs.loadData([]);",
			"      },",
			"      onOk: handleDrawerConfirm,",
			"    });",
			"  };",
			"",
			"  const handleDrawerConfirm = async () => {",
			"    const validate = await detailDs.validate();",
			"    if (!validate) {",
			"      return false;",
			"    }",
			"    // 可以直接塞回表格中",
			"    // 。。。。。。",
			"",
			"    // 单独保存时建议搭配useRequest使用，失败时return Promise.resolve(false);",
			"    // return saveContainer",
			"    //   .run({",
			"    //     params: detailDs!.current!.toData(),",
			"    //   })",
			"    //   .then(res => {",
			"    //     if (res && res.success) {",
			"    //       notification.success({});",
			"    //       ds.query();",
			"    //     } else {",
			"    //       return Promise.resolve(false);",
			"    //     }",
			"    //   });",
			"  };",
			"",
			"  return (",
			"    <Table",
			"      dataSet={ds}",
			"      columns={columns}",
			"      filter={record => {",
			"        return record.status !== 'delete';",
			"      }}",
			"    />",
			"  );",
			"};",
			"",
			"export default EditTableInModal;",
			""
		],
		"description": "基础的抽屉编辑表格"
	}
}